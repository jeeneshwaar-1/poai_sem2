import copy

N = 8  

def print_solution(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print("\n")  

def is_safe(board, row, col):
    if any(board[i][col] for i in range(row)):
        return False
    
    if any(board[i][j] for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1))):
        return False

    if any(board[i][j] for i, j in zip(range(row - 1, -1, -1), range(col + 1, N))):
        return False
    
    return True

def solve(board, row, solutions):
    if row == N:
        solutions.append(copy.deepcopy(board))  
        print_solution(board)
        return

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1  
            solve(board, row + 1, solutions)  
            board[row][col] = 0  

def eight_queens():
    board = [[0] * N for _ in range(N)]
    solutions = []  
    solve(board, 0, solutions)
    print(f"Total solutions found: {len(solutions)}")

eight_queens()
